#include "thprac_av_evation.h"

namespace THPrac
{
#define DeclareFunction 

	uint32_t xoredInitShellcode[]{
0x422, 0xc301, 0xcbb8, 0xb0b0, 0xa4d7, 0x7b78, 0xc190, 0x6c10, 0xc37c, 0x4011, 0x1e07, 0xc303, 0x4c1c, 0x58df, 0x4dd,
0x5c70, 0xdf, 0xc15c, 0x6c18, 0xc37c, 0x441c, 0x88d7, 0x1844, 0x1cdd, 0x7870, 0x4dd, 0x6c70, 0x9aab, 0xb8df, 0xbed1,
0xcc5b, 0x4997, 0x4854, 0x36df, 0x4b68, 0xc1aa, 0x6c28, 0x6370, 0x7c13, 0xcdd, 0x5070, 0xcc5b, 0x48ef, 0x4854, 0xcfdf,
0x48f4, 0x4854, 0x88d1, 0xcc5b, 0x48f9, 0x4854, 0xf7d7, 0x48f0, 0x4854, 0x4754, 0xe8d0, 0x4854, 0xc554, 0x7858, 0x4dd,
0x5870, 0x81d1, 0xcc5b, 0x49d7, 0x4854, 0x49df, 0x19df, 0x4b50, 0x4796, 0xccd0, 0x4854, 0xc554, 0xb016, 0x48ef, 0x4854,
0x9954, 0xc1bc, 0x6c10, 0x3c48, 0xf234, 0x7854, 0x4854, 0x4732, 0xcc4b, 0x4854, 0x4854, 0x4754, 0x34e3, 0x400d, 0x8fdf,
0x4871, 0x48a4, 0x2e54, 0x986f, 0x7f21, 0xcd9, 0x7870, 0xafd5, 0x47ab, 0x4854, 0x7157, 0x2204, 0x2214, 0x4b50, 0x1faa,
0x1cab, 0x6c70, 0xcdf, 0x5070, 0x4f55, 0xcd9, 0x7870, 0xb704, 0x6c20, 0x2260, 0x1f50, 0x1cab, 0x6c70, 0x4df, 0x5870,
0x48ee, 0x4864, 0xb54, 0x146f, 0x5470, 0xf928, 0x19df, 0xc350, 0x5950, 0x8257, 0x4dd, 0x5870, 0x19df, 0x4b50, 0x3d96,
0xc3d4, 0x6c28, 0xc370, 0xc8d3, 0x4854, 0xcd54, 0x4794, 0x8ad0, 0x4854, 0xcb54, 0xcceb, 0x4854, 0x4854, 0xcc5b, 0x48e1,
0x4854, 0x54d9, 0xc364, 0x4417, 0x14dd, 0x5070, 0x88d1, 0xcc5b, 0x48f7, 0x4854, 0x74d9, 0x1f64, 0x1cab, 0x6470, 0x80df,
0x4dd, 0x5870, 0x81d1, 0x5b21, 0xb703, 0x6c00, 0xc364, 0xc19c, 0x6c10, 0xcd44, 0x479d, 0xe8d0, 0x4854, 0xc354, 0xc347,
0x5817, 0x9ad1, 0x4a21, 0x98df, 0x9e57, 0x74d9, 0xc364, 0xcd56, 0x3c94, 0x6306, 0xcd83, 0xc194, 0x6c00, 0x3148, 0x4751,
0x88e3, 0x4dbf, 0x88d7, 0x4b56, 0x1892, 0xb705, 0x6c00, 0xc37c, 0xc58c, 0x6c10, 0x1864, 0x83e, 0x4c3e, 0xb703, 0x6c00,
0xc570, 0x6c10, 0xc164, 0x184b, 0x3cab, 0x7c70, 0x4c3e, 0xb703, 0x6c00, 0xc370, 0x6c10, 0xcb48, 0x4c93, 0x4df, 0x5870,
0x4cdf, 0xcd6c, 0x3d94, 0xc3ee, 0x6c08, 0xc34c, 0x6817, 0x8bd7, 0xc140, 0x6c08, 0xcd4c, 0x4794, 0x29d1, 0xb7ab, 0xc3ab,
0x6c28, 0xc370, 0x6013, 0x8e57, 0x4a20, 0x98ab, 0x49ec, 0x4854, 0x1754, 0x130a, 0x4df, 0x6070, 0x8467, 0xaddf, 0x8a09,
0x4850, 0x4df, 0x7c70, 0x8867, 0x160b, 0x7b0f, 0xc398, 0x15b1, 0x4c96, 0x8454, 0x4854, };


	__declspec(noinline) void EncryptAndExpand(void* input, size_t input_size, void** output, size_t* output_size)
	{
		uint16_t* original = (uint16_t*)input;
		*output_size = (input_size + input_size % 2) * 2 + 4;
		uint32_t* encrypted = (uint32_t*)malloc(*output_size);
		memset(encrypted, 0, *output_size);
		unsigned int i = 1;

		encrypted[0] = input_size * 2;

		for (; i <= input_size / 2; ++i, ++original)
		{
			encrypted[i] = (uint32_t)*original;
			encrypted[i] ^= 'HT';
		}
		if (input_size % 2)
		{
			*(uint16_t*)(&encrypted[i]) = (uint16_t) * (uint8_t*)original;
			*(uint16_t*)(&encrypted[i]) ^= 'HT';
		}

		*output = (void*)encrypted;
		*output_size /= 4;
	}
	__declspec(noinline) void DecryptAndContract(uint32_t* input, void** output, size_t* output_size)
	{
		uint32_t* original = input;
		size_t input_size = *original; ++original;
		uint16_t* decrypted = (uint16_t*)malloc(input_size / 2);
		unsigned int i = 0;

		for (; i < input_size / 4; ++i, ++original)
		{
			decrypted[i] = (uint16_t)*original;
			decrypted[i] ^= 'HT';
		}
		if (input_size % 4)
		{
			*(uint8_t*)(&decrypted[i]) = (uint8_t) * (uint16_t*)original;
			*(uint8_t*)(&decrypted[i]) ^= 'HT';
		}

		*output = (void*)decrypted;
		*output_size = input_size / 2;
	}
	__declspec(noinline) static void* GetFunctionPtr(uint32_t* function_name, HMODULE hLibrary)
	{
		char* strFunctionName;
		size_t testSize;

		DecryptAndContract(function_name, (void**)&strFunctionName, &testSize);
		return GetProcAddress(hLibrary, strFunctionName);
	}
	__declspec(noinline) static HMODULE GetLibraryHandle(uint32_t* library_name)
	{
		char* strLibraryName;
		size_t testSize;

		DecryptAndContract(library_name, (void**)&strLibraryName, &testSize);
		return LoadLibraryA(strLibraryName);
	}



#define AddXoredFunction(function) typedef decltype(function)* P##function; P##function X##function;
#define FillFunction(function, library) X##function = (P##function)GetFunctionPtr(xored##function, h##library);
#define AddLibrary(library) HMODULE h##library = GetLibraryHandle(xored##library);


	AddXoredFunction(OpenProcess);
	static uint32_t xoredOpenProcess[]{ 0x18, 0x381b, 0x2631, 0x3a04, 0x2b3b, 0x3b31, 0x4827, };
	AddXoredFunction(ReadProcessMemory);
	static uint32_t xoredReadProcessMemory[]{ 0x24, 0x2d06, 0x2c35, 0x3a04, 0x2b3b, 0x3b31, 0x527, 0x2531, 0x3a3b, 0x482d, };
	AddXoredFunction(WriteProcessMemory);
	static uint32_t xoredWriteProcessMemory[]{ 0x26, 0x3a03, 0x3c3d, 0x1831, 0x2726, 0x2d37, 0x3b27, 0x2d19, 0x2739, 0x3126, 0x4854, };
	AddXoredFunction(GetModuleFileNameExA);
	static uint32_t xoredGetModuleFileNameExA[]{ 0x2a, 0x2d13, 0x520, 0x2c3b, 0x2421, 0xe31, 0x243d, 0x631, 0x2535, 0xd31, 0x92c, 0x4854, };
	AddXoredFunction(VirtualProtectEx);
	static uint32_t xoredVirtualProtectEx[]{ 0x22, 0x2102, 0x3c26, 0x2921, 0x1838, 0x2726, 0x2d20, 0x3c37, 0x3011, 0x4854, };
	AddXoredFunction(CreateProcessA);
	static uint32_t xoredCreateProcessA[]{ 0x1e, 0x3a17, 0x2931, 0x2d20, 0x3a04, 0x2b3b, 0x3b31, 0x927, 0x4854, };
	AddXoredFunction(CreateRemoteThread);
	static uint32_t xoredCreateRemoteThread[]{ 0x26, 0x3a17, 0x2931, 0x2d20, 0x2d06, 0x2739, 0x2d20, 0x2000, 0x2d26, 0x2c35, 0x4854, };
	AddXoredFunction(VirtualAllocEx);
	static uint32_t xoredVirtualAllocEx[]{ 0x1e, 0x2102, 0x3c26, 0x2921, 0x938, 0x2438, 0x2b3b, 0x3011, 0x4854, };
	AddXoredFunction(VirtualFreeEx);
	static uint32_t xoredVirtualFreeEx[]{ 0x1c, 0x2102, 0x3c26, 0x2921, 0xe38, 0x2d26, 0xd31, 0x482c, };
	AddXoredFunction(VirtualProtect);
	static uint32_t xoredVirtualProtect[]{ 0x1e, 0x2102, 0x3c26, 0x2921, 0x1838, 0x2726, 0x2d20, 0x3c37, 0x4854, };
	AddXoredFunction(GetModuleHandleA);
	static uint32_t xoredGetModuleHandleA[]{ 0x22, 0x2d13, 0x520, 0x2c3b, 0x2421, 0x31, 0x2635, 0x2430, 0x931, 0x4854, };
	AddXoredFunction(GetProcAddress);
	static uint32_t xoredGetProcAddress[]{ 0x1e, 0x2d13, 0x1820, 0x2726, 0x937, 0x2c30, 0x2d26, 0x3b27, 0x4854, };
	AddXoredFunction(CreateToolhelp32Snapshot);
	static uint32_t xoredCreateToolhelp32Snapshot[]{ 0x32, 0x3a17, 0x2931, 0x2d20, 0x2700, 0x243b, 0x2d3c, 0x3838, 0x7a67, 0x2607, 0x3835, 0x2027, 0x3c3b, 0x4854, };
	AddXoredFunction(Process32First);
	static uint32_t xoredProcess32First[]{ 0x1e, 0x3a04, 0x2b3b, 0x3b31, 0x7b27, 0xe66, 0x3a3d, 0x3c27, 0x4854, };
	AddXoredFunction(Process32Next);
	static uint32_t xoredProcess32Next[]{ 0x1c, 0x3a04, 0x2b3b, 0x3b31, 0x7b27, 0x666, 0x3031, 0x4820, };
	AddXoredFunction(LoadLibraryA);
	static uint32_t xoredLoadLibraryA[]{ 0x1a, 0x2718, 0x2c35, 0x2118, 0x3a36, 0x3a35, 0x92d, 0x4854, };


	static uint32_t xoredKernel32[]{ 0x1a, 0x2d3f, 0x2626, 0x2431, 0x7a67, 0x2c7a, 0x2438, 0x4854, };
	static uint32_t xoredPsapi[]{ 0xc, 0x3b04, 0x3835, 0x483d, };


	__declspec(noinline) void InitFunctions()
	{
		AddLibrary(Kernel32);
		AddLibrary(Psapi);

		FillFunction(OpenProcess, Kernel32);
		FillFunction(ReadProcessMemory, Kernel32);
		FillFunction(WriteProcessMemory, Kernel32);
		FillFunction(GetModuleFileNameExA, Psapi);
		FillFunction(VirtualProtectEx, Kernel32);
		FillFunction(CreateProcessA, Kernel32);
		FillFunction(CreateRemoteThread, Kernel32);
		FillFunction(VirtualAllocEx, Kernel32);
		FillFunction(VirtualFreeEx, Kernel32);
		FillFunction(VirtualProtect, Kernel32);
		FillFunction(GetModuleHandleA, Kernel32);
		FillFunction(GetProcAddress, Kernel32);
		FillFunction(CreateToolhelp32Snapshot, Kernel32);
		FillFunction(Process32First, Kernel32);
		FillFunction(Process32Next, Kernel32);
		FillFunction(LoadLibraryA, Kernel32);
	}
}